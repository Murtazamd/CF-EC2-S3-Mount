AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating a VPC with public subnet, internet gateway, and EC2 instances with S3 bucket mounted

Parameters:
  UserDataScript:
    Type: String
    Default: |
      #!/bin/bash
      yum update -y
      yum install -y docker
      service docker start
      usermod -a -G docker ec2-user
      sudo yum install automake fuse fuse-devel gcc-c++ git libcurl-devel libxml2-devel openssl-devel -y
      git clone https://github.com/s3fs-fuse/s3fs-fuse.git
      cd s3fs-fuse
      ./autogen.sh
      ./configure
      make
      sudo make install
      touch ~/.passwd-s3fs
      chmod 600 ~/.passwd-s3fs
      mkdir ~/s3_mount_point
      sudo s3fs mittu07 ~/s3_mount_point -o passwd_file=~/.passwd-s3fs -o umask=022

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet3

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTable

  MyEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: "*"
        - PolicyName: ParameterStoreAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/MyApp/AWSCredentials"

  MyEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: MyEC2InstanceRole

  MyEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-07caf09b362be10b8
      SubnetId: !Ref PublicSubnet1
      KeyName: aws-keypair
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      UserData: 
        Fn::Base64: !Sub "${UserDataScript}"
      Tags:
        - Key: Name
          Value: MyEC2Instance1

  MyEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-07caf09b362be10b8
      SubnetId: !Ref PublicSubnet2
      KeyName: aws-keypair
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      UserData: 
        Fn::Base64: !Sub "${UserDataScript}"
      Tags:
        - Key: Name
          Value: MyEC2Instance2

  MyEC2Instance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-07caf09b362be10b8
      SubnetId: !Ref PublicSubnet3
      KeyName: aws-keypair
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      UserData: 
        Fn::Base64: !Sub "${UserDataScript}"
      Tags:
        - Key: Name
          Value: MyEC2Instance3
